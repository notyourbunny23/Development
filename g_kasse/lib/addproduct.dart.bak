import 'package:flutter/material.dart';
import 'package:flutter_icon_snackbar/flutter_icon_snackbar.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
//import 'package:g_kasse/products.dart';
import 'package:g_kasse/widgets.dart';

String currentSelectedCategory = "";
String? selectedValue;

class AddProduct extends StatefulWidget {
  AddProduct({super.key});

  @override
  State<AddProduct> createState() => _AddProductState();
}

class _AddProductState extends State<AddProduct> {
  TextEditingController _selectCategory = TextEditingController();
  TextEditingController _descriptionController = TextEditingController();
  TextEditingController _barcodeController = TextEditingController();
  TextEditingController _priceController = TextEditingController();
  TextEditingController _taxrateController = TextEditingController();

  // Firebase connection
  FirebaseFirestore firestore = FirebaseFirestore.instance;

// Добавление товара в базу данных и привязка его к категории
  Future<void> addProduct(String description, String barcode, double price, double taxRate, String categoryId) async {
    try {
      await firestore.collection('products').add({
        'category_id': categoryId,
        'description': _descriptionController.text,
        'barcode': _barcodeController.text,
        'price': _priceController.text,
        'taxrate': _taxrateController.text,
      });
    } catch (e) {
      print('Error adding product: $e');
    }
  }

  // Получение categoryId по имени категории
  Future<String?> getCategoryIdByName(String? categoryName) async {
    categoryName = currentSelectedCategory;
    try {
      var querySnapshot = await firestore.collection('categories').where('name', isEqualTo: categoryName).get();

      if (querySnapshot.docs.isNotEmpty) {
        var category = querySnapshot.docs.first;
        return category.id;
      } else {
        print('Category not found.');
        return null;
      }
    } catch (e) {
      print('Error getting categoryId: $e');
      return null;
    }
  }

// Получение списка всех категорий

  List<String> categories = ['DefaultCategoryName']; // Используется для хранения категорий

  @override
  void initState() {
    super.initState();
    // Вызываем метод getCategories при инициализации виджета
    getCategories();
// Если selectedValue пуст или не содержится в списке, выберем первый элемент из списка
    if (currentSelectedCategory.isEmpty || !categories.contains(currentSelectedCategory)) {
      setState(() {
        currentSelectedCategory = categories.isNotEmpty ? categories.first : "DefaultCategoryName";
      });
    }
  }

  Future<void> getCategories() async {
    try {
      QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collection('categories').get();

      List<String> newCategories = [];

      querySnapshot.docs.forEach((doc) {
        newCategories.add((doc.data() as Map<String, dynamic>)['name'] ?? 'DefaultCategoryName');
      });

      newCategories.sort(); //Sort Categories
      print(newCategories);

      // Обновляем состояние и перестраиваем виджет
      setState(() {
        categories = newCategories;
      });
    } catch (error) {
      print('Error getting categories: $error');
    }
  }

  Widget buildDropdownButton() {
    return DropdownButton<String>(
      key: UniqueKey(), // Add a UniqueKey to force a rebuild
      padding: EdgeInsets.only(left: 15, right: 10),
      isExpanded: true,
      value: selectedValue, // начальное значение
      icon: Icon(Icons.arrow_drop_down),
      iconSize: 24,
      elevation: 16,
      //No underline
      underline: Container(
        height: 0,
      ),

      onChanged: (newValue) {
        setState(() {
          selectedValue = newValue;
        });
      },

      items: categories.isNotEmpty
          ? categories.map((item) {
              return DropdownMenuItem<String>(
                value: item,
                child: Text(item),
              );
            }).toList()
          : null, // Set to null if the list is empty
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFFEF7FF),
      appBar: const GKasseAppBar(),
      drawer: const GDrawer(),
      body: Column(
        mainAxisSize: MainAxisSize.max,
        children: [
          Row(
            children: [
              Container(
                padding: EdgeInsets.only(top: 20, left: 10, right: 10, bottom: 10),
                child: const Text(
                  "Produkt hinzufügen",
                  style: TextStyle(
                    fontSize: 17,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          Row(
            children: [
              Padding(
                padding: const EdgeInsets.all(10.0),
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(
                      color: const Color(0xFF79747E),
                      width: 0.8,
                    ),
                  ),
                  width: MediaQuery.of(context).size.width - 80.0,
                  height: 50,
                  child: Column(
                    children: [
                      // ProductDropDown(),
//TODO DropDownWidget
                      buildDropdownButton(),
//TODO DropDownWidget

// DropDownWidget
                    ],
                  ),
                ),
              ),
              Container(
                height: 50,
                width: 50,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(
                    color: const Color(0xFF79747E),
                    width: 0.8,
                  ),
                ),
                child: IconButton(
                  onPressed: () {
                    _showAddCategoryDialog(context);
                  }, // TODO: Add function
                  icon: const Icon(Icons.add_rounded),
                ),
              )
            ],
          ),

          Row(
            children: [
              Container(
                child: Expanded(
                  child: Container(
                    margin: EdgeInsets.all(10),
                    padding: EdgeInsets.only(left: 20, right: 20),
                    height: 80,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8.0),
                      border: Border.all(
                        color: const Color(0xFF79747E),
                        width: 0.8,
                      ),
                    ),
                    child: TextField(
                      controller: _descriptionController,
                      decoration: const InputDecoration(
                        border: InputBorder.none,
                        labelText: 'Description',
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
          // Next Row

          Row(
            children: [
              Container(
                child: Expanded(
                  child: Container(
                    margin: EdgeInsets.all(10),
                    padding: EdgeInsets.only(left: 20, right: 20),
                    height: 60,
                    width: 300,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8.0),
                      border: Border.all(
                        color: const Color(0xFF79747E),
                        width: 0.8,
                      ),
                    ),
                    child: TextField(
                      controller: _barcodeController,
                      decoration: const InputDecoration(
                        border: InputBorder.none,
                        labelText: 'Barcode',
                      ),
                      keyboardType: TextInputType.number, // Keyboard with numbers only
                    ),
                  ),
                ),
              ),
              Container(
                child: Expanded(
                  child: Container(
                      margin: EdgeInsets.only(right: 10),
                      padding: EdgeInsets.only(left: 20, right: 20),
                      height: 60,
                      width: 50,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8.0),
                        border: Border.all(
                          color: const Color(0xFF79747E),
                          width: 0.8,
                        ),
                      ),
                      child: DropdownMenu(
                        controller: _taxrateController,
                        //label: Text("TaxRate"),

                        //Hide Border
                        inputDecorationTheme: const InputDecorationTheme(
                            filled: false,
                            border: UnderlineInputBorder(
                              borderSide: BorderSide.none,
                            )),
                        width: 110,
                        initialSelection: "0.19",
                        dropdownMenuEntries: [
                          const DropdownMenuEntry(
                            value: "0.19",
                            label: "19%",
                          ),
                          const DropdownMenuEntry(
                            value: "0.07",
                            label: "7%",
                          )
                        ],
                      )),
                ),
              ),
              Container(
                child: Expanded(
                  child: Container(
                    margin: EdgeInsets.only(right: 10),
                    padding: EdgeInsets.only(left: 20, right: 20),
                    height: 60,
                    width: 100,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8.0),
                      border: Border.all(
                        color: const Color(0xFF79747E),
                        width: 0.8,
                      ),
                    ),
                    child: TextField(
                      controller: _priceController,
                      decoration: const InputDecoration(
                        border: InputBorder.none,
                        labelText: 'Price',
                      ),
                      keyboardType: TextInputType.number, // Keyboard with numbers only
                    ),
                  ),
                ),
              ),
            ],
          ),
          Row(
              // children: [
              //   ElevatedButton(
              //       onPressed: () {
              //         getCategories();
              //       },
              //       child: Text("Get All Cats"))
              // ],
              ),

          Container(
            child: Container(
                margin: EdgeInsets.only(right: 10),
                padding: EdgeInsets.only(left: 20, right: 20),
                height: 60,
                width: 300,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8.0),
                  border: Border.all(
                    color: const Color(0xFF79747E),
                    width: 0.8,
                  ),
                ),
                child: ElevatedButton(
                    onPressed: () {
                      if (selectedValue != "") {
                        String? categoryId = selectedValue;
                        String description = _descriptionController.text;
                        double price = double.parse(_priceController.text.replaceAll(",", ".")); // Replace , with .
                        print("Price: $price");

                        if (categoryId != null) {
                          addProduct(description, _barcodeController.text, price, 0.19, categoryId).then((_) {
                            print('Product added successfully!');
                          });
                        } else {
                          print('Category ID is null. Handle accordingly.');
                        }
                      }
                    },
                    child: Text("Speichern"))),
          ),
        ],
      ),
    );
  }
}

// ShowDialog Add Category
void _showAddCategoryDialog(BuildContext context) {
  TextEditingController _newCategory = TextEditingController();

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: const Text(
          'Kategorie hinzufügen',
          style: TextStyle(fontSize: 16),
        ),
        content: Container(
          height: 70,
          width: 400,
          child: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                TextField(
                  controller: _newCategory,
                  decoration: InputDecoration(
                    isDense: true,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                  ),
                )
              ],
            ),
          ),
        ),
        actions: <Widget>[
          TextButton(
            child: const Text('Abbrechen'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          TextButton(
            child: const Text('Hinzufügen'),
            onPressed: () async {
              //TODO: Add category function

              String message = "Added Caterory";
              if (_newCategory.text != "") {
                FirebaseFirestore firestore = FirebaseFirestore.instance;

                try {
                  await firestore.collection('categories').add({
                    'name': _newCategory.text,
                  });

                  message = "Added Caterory";
                  //Navigator.of(context).pop(); // Close Dialog
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => AddProduct()),
                  );
                } catch (e) {
                  print('Error adding category: $e');
                  message = "Added Caterory";
                }

                IconSnackBar.show(context: context, snackBarType: SnackBarType.save, duration: const Duration(milliseconds: 1500), label: message); // Added to Cart SnackBar Message

                //TODO Firestore Add new Category
              }
            },
          ),
        ],
      );
    },
  );
}

Future<void> addCategory(String categoryName) async {
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  QuerySnapshot querySnapshot = await firestore.collection('product').get();

  List<String> categorysList = [];

  categorysList.clear(); // Clear Category List

  for (QueryDocumentSnapshot doc in querySnapshot.docs) {
    // Получаем данные о категории из каждого документа
    String category = doc['Category'];
    categorysList.add(category);
  }

  print(categorysList);
}
